package org.meandre.zigzag.transformations;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import org.meandre.core.repository.ConnectorDescription;
import org.meandre.core.repository.ExecutableComponentDescription;
import org.meandre.core.repository.ExecutableComponentInstanceDescription;
import org.meandre.core.repository.FlowDescription;
import org.meandre.core.repository.QueryableRepository;

import com.hp.hpl.jena.rdf.model.Resource;

public class RDF2ZZConverter {
    private static final String NEWLINE = System.getProperty("line.separator");

    private final QueryableRepository _repository;
    private String _importSource;

    public RDF2ZZConverter(QueryableRepository repository) {
        _repository = repository;
    }

    public void setImportSource(String importSource) {
        _importSource = importSource;
    }

    public String generateZZ(String flowURI) throws FlowNotFoundException {
        Map<String, FlowDescription> flows = _repository.getAvailableFlowDescriptionsMap();
        FlowDescription flow = flows.get(flowURI);

        if (flow == null) throw new FlowNotFoundException(flowURI);

        Map<Resource, String> aliasMap = createAliasMap(flow);
        Map<ExecutableComponentInstanceDescription, String> instantiationMap = createInstantiationMap(flow);

        StringBuilder zzScript = new StringBuilder();
        zzScript.append(generateZZHeader(flow)).append(NEWLINE);
        zzScript.append(generateZZImports()).append(NEWLINE);
        zzScript.append(generateZZAliases(aliasMap)).append(NEWLINE);
        zzScript.append(generateZZInstantiations(instantiationMap, aliasMap)).append(NEWLINE);
        zzScript.append(generateZZPropertyAssignments(instantiationMap));
        zzScript.append(generateZZConnections(flow, instantiationMap)).append(NEWLINE);
        zzScript.append(generateZZFooter(flow));

        return zzScript.toString();
    }

    protected String generateZZHeader(FlowDescription flow) {
        StringBuilder sb = new StringBuilder();
        sb.append("#").append(NEWLINE);
        sb.append("# ").append(String.format("Generated by %s on %tc", getClass().getSimpleName(), new Date())).append(NEWLINE);
        sb.append("#").append(NEWLINE);
        sb.append(String.format("# @name \t%s", flow.getName())).append(NEWLINE);
        sb.append(String.format("# @description \t%s", flow.getDescription().trim().replaceAll("\n", "\n#              \t"))).append(NEWLINE);
        sb.append(String.format("# @creator \t%s", flow.getCreator())).append(NEWLINE);
        sb.append(String.format("# @date \t%tc", flow.getCreationDate())).append(NEWLINE);
        sb.append(String.format("# @rights \t%s", flow.getRights().trim().replaceAll("\n", "\n#         \t"))).append(NEWLINE);
        sb.append(String.format("# @tags \t%s", flow.getTags().toString())).append(NEWLINE);
        sb.append(String.format("# @uri  \t%s", flow.getFlowComponentAsString())).append(NEWLINE);
        sb.append("#").append(NEWLINE);

        return sb.toString();
    }

    protected String generateZZFooter(FlowDescription flow) {
        return "";
    }

    protected String generateZZImports() {
        StringBuilder sb = new StringBuilder();
        sb.append("#").append(NEWLINE);
        sb.append("# Specify component imports").append(NEWLINE);
        sb.append("#").append(NEWLINE);

        if (_importSource == null)
            sb.append("# TODO: Add component import statement(s) here").append(NEWLINE);
        else
            sb.append(String.format("import <%s>", _importSource)).append(NEWLINE);

        return sb.toString();
    }

    protected Map<Resource, String> createAliasMap(FlowDescription flow) {
        Map<Resource, String> zzAliases = new HashMap<Resource, String>();

        for (ExecutableComponentInstanceDescription instance : flow.getExecutableComponentInstances()) {
            Resource resComponent = instance.getExecutableComponent();
            ExecutableComponentDescription component = _repository.getExecutableComponentDescription(resComponent);
            String componentAlias = null;

            if ((componentAlias = zzAliases.get(resComponent)) == null) {
                componentAlias = ((component != null) ? component.getName().replaceAll(" |\t", "_") : getLastPart(resComponent.getURI())).toUpperCase();
                zzAliases.put(resComponent, componentAlias);
            }
        }

        return zzAliases;
    }

    protected Map<ExecutableComponentInstanceDescription, String> createInstantiationMap(FlowDescription flow) {
        Map<ExecutableComponentInstanceDescription, String> zzInstances = new HashMap<ExecutableComponentInstanceDescription, String>();
        Map<ExecutableComponentDescription, Integer> zzInstanceCounter = new HashMap<ExecutableComponentDescription, Integer>();

        for (ExecutableComponentInstanceDescription instance : flow.getExecutableComponentInstances()) {
            ExecutableComponentDescription component = _repository.getExecutableComponentDescription(instance.getExecutableComponent());
            String compInstanceName = instance.getName().toLowerCase().replaceAll(" |\t", "_");
            Integer counter = null;

            if ((counter = zzInstanceCounter.get(component)) != null && zzInstances.containsValue(compInstanceName))
                compInstanceName += "_" + ++counter;
            else
                counter = 1;

            zzInstances.put(instance, compInstanceName);
            zzInstanceCounter.put(component, counter);
        }

        return zzInstances;
    }

    protected String generateZZAliases(Map<Resource, String> aliasMap) {
        StringBuilder sb = new StringBuilder();
        sb.append("#").append(NEWLINE);
        sb.append("# Create the component aliases").append(NEWLINE);
        sb.append("#").append(NEWLINE);

        for (Entry<Resource, String> alias : aliasMap.entrySet())
            sb.append(String.format("alias <%s> as %s", alias.getKey().getURI(), alias.getValue())).append(NEWLINE);

        return sb.toString();
    }

    protected String generateZZInstantiations(
            Map<ExecutableComponentInstanceDescription, String> instantiationMap,
            Map<Resource, String> aliasMap) {

        StringBuilder sb = new StringBuilder();
        sb.append("#").append(NEWLINE);
        sb.append("# Create the component instances").append(NEWLINE);
        sb.append("#").append(NEWLINE);

        for (Entry<ExecutableComponentInstanceDescription, String> instance : instantiationMap.entrySet()) {
            Resource resComponent = instance.getKey().getExecutableComponent();
            sb.append(String.format("%s = %s()", instance.getValue(), aliasMap.get(resComponent))).append(NEWLINE);
        }

        return sb.toString();
    }

    protected String generateZZPropertyAssignments(Map<ExecutableComponentInstanceDescription, String> instantiationMap) {
        StringBuilder sb = new StringBuilder();
        sb.append("#").append(NEWLINE);
        sb.append("# Set component properties").append(NEWLINE);
        sb.append("#").append(NEWLINE);

        for (Entry<ExecutableComponentInstanceDescription, String> instance : instantiationMap.entrySet()) {
            String compInstanceName = instance.getValue();

            for (Entry<String, String> property : instance.getKey().getProperties().getValueMap().entrySet())
                if (!property.getKey().startsWith("wb_"))
                    sb.append(String.format("%s.%s = \"%s\"", compInstanceName, property.getKey(), property.getValue())).append(NEWLINE);

            sb.append(NEWLINE);
        }

        return sb.toString();
    }

    protected String generateZZConnections(FlowDescription flow, Map<ExecutableComponentInstanceDescription, String> instantiationMap) {
        StringBuilder sb = new StringBuilder();
        sb.append("#").append(NEWLINE);
        sb.append("# Create the flow by connecting the components").append(NEWLINE);
        sb.append("#").append(NEWLINE);

        Map<String, String> connectionsMap = new HashMap<String, String>();
        Set<String> sourceComponents = new HashSet<String>();

        for (ConnectorDescription connector : flow.getConnectorDescriptions()) {
            ExecutableComponentInstanceDescription srcInstance = flow.getExecutableComponentInstanceDescription(connector.getSourceInstance());
            ExecutableComponentInstanceDescription targetInstance = flow.getExecutableComponentInstanceDescription(connector.getTargetInstance());

            Resource resSrcPort = connector.getSourceInstanceDataPort();
            Resource resTargetPort = connector.getTargetInstanceDataPort();

            Resource resSrcComponent = srcInstance.getExecutableComponent();
            Resource resTargetComponent = targetInstance.getExecutableComponent();

            ExecutableComponentDescription srcComp = _repository.getExecutableComponentDescription(resSrcComponent);
            ExecutableComponentDescription targetComp = _repository.getExecutableComponentDescription(resTargetComponent);

            String srcPortName = (srcComp != null) ? srcComp.getOutput(resSrcPort).getName() : getLastPart(resSrcPort.getURI());
            String targetPortName = (targetComp != null) ? targetComp.getInput(resTargetPort).getName() : getLastPart(resTargetPort.getURI());

            String srcInstanceName = instantiationMap.get(srcInstance);
            String targetInstanceName = instantiationMap.get(targetInstance);

            // Sanity check
            if (srcPortName.contains(" "))
                throw new RuntimeException("Port names cannot contain spaces! component: " + srcInstance.getName() + " port: " + srcPortName);
            if (targetPortName.contains(" "))
                throw new RuntimeException("Port names cannot contain spaces! component: " + targetInstance.getName() + " port: " + targetPortName);

            if (srcComp == null)
                sb.append(String.format("# WARNING: Component name '%s' of type '%s' with alias '%s_outputs':%n#\tGuessing name of" +
                        " output port with id '%s' as '%s'! Change if incorrect!",
                        srcInstance.getName(), resSrcComponent.getURI(), srcInstanceName, resSrcPort.getURI(), srcPortName)).append(NEWLINE);
            if (targetComp == null)
                sb.append(String.format("# WARNING: Component name '%s' of type '%s' with alias '%s':%n#\tGuessing name of" +
                        " input port with id '%s' as '%s'! Change if incorrect!",
                        targetInstance.getName(), resTargetComponent.getURI(), targetInstanceName, resTargetPort.getURI(), targetPortName)).append(NEWLINE);

            String connections = null;

            if ((connections = connectionsMap.get(targetInstanceName)) != null)
                connections += "; ";
            else
                connections = "";

            connections += String.format("%s: %s_outputs.%s", targetPortName, srcInstanceName, srcPortName);
            connectionsMap.put(targetInstanceName, connections);
            sourceComponents.add(srcInstanceName);
        }

        for (String instanceName : sourceComponents)
            sb.append(String.format("@%1$s_outputs = %1$s()", instanceName)).append(NEWLINE);

        sb.append(NEWLINE);

        for (Entry<String, String> entry : connectionsMap.entrySet()) {
            String[] portAssignments = entry.getValue().split(";");
            sb.append(String.format("%s(", entry.getKey()));

            if (portAssignments.length > 1) {
                sb.append(NEWLINE);
                for (int i = 0; i < portAssignments.length; i++)
                    sb.append("\t" + portAssignments[i].trim()).append((i == portAssignments.length-1) ? "" : ";").append(NEWLINE);
                sb.append(")").append(NEWLINE);
            }
            else
                sb.append(String.format("%s)", entry.getValue())).append(NEWLINE);
        }

        return sb.toString();
    }

    private String getLastPart(String uri) {
        String result = null;

        String[] parts = uri.split("/");
        for (int i = parts.length-1; i >= 0; i--)
            if (parts[i].length() > 0) {
                result = parts[i];
                break;
            }

        return result;
    }
}
