<?xml version="1.0" encoding="UTF-8"?>
<project name="Meandre-Infrastructure" default="compile" xmlns:ivy="antlib:org.apache.ivy.ant">
    <!-- Check whether Java 1.5 or Java 1.6 is being used -->
    <condition property="jdk15+">
        <or>
            <contains string="${java.version}" substring="1.5"/>
            <contains string="${java.version}" substring="1.6"/>
        </or>
    </condition>
    
    <fail unless="jdk15+"
        message="This project requires at least Java 5. Please set JAVA_HOME to point to where the JDK is installed."/>
    
    <!-- here is the version of ivy we will use. change this property to try a newer version if you want -->
    <property name="ivy.install.version" value="2.1.0-rc1" />
    <property name="ivy.jar.dir" value="${basedir}/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    
    <!--#################### Project Properties #########################-->
    <property name="version" value="1.4.4"/>
    <property name="release_tag" value="Sara"/>
    
    <property name="build.dir" value="${basedir}/build"/>
    <property name="build.src.dir" value="${build.dir}/classes"/>
    <property name="build.test.dir" value="${build.dir}/classes-test"/>
    
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="test.dir" value="${basedir}/test"/>
    <property name="data.dir" value="${basedir}/data"/>
    <property name="doc.dir" value="${basedir}/javadoc"/>
    <property name="installer.dir" value="${basedir}/installer"/>
 
    <property name="version.template" value="${basedir}/version.tpl"/>
    <property name="version.file" value="${basedir}/src-kernel/code/org/meandre/core/utils/Version.java"/>
    
    <!-- Code locations -->
    <path id="src.code.dirs">
        <dirset dir="${basedir}" includes="src-*/code"/>
    </path>
    
    <!-- Test locations -->
    <path id="src.test.dirs">
        <dirset dir="${basedir}" includes="src-*/test" />
    </path>
    
    <!--######################### BUILD TARGETS ###########################-->
    
    <target name="download-ivy" unless="skip.download">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get 
            src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}" usetimestamp="true"/>
        <get 
            src="http://repo1.maven.org/maven2/com/jcraft/jsch/0.1.38/jsch-0.1.38.jar"
            dest="${ivy.jar.dir}/jsch.jar" usetimestamp="true"/>
        
        <!--<get 
            src="http://repo1.maven.org/maven2/commons-vfs/commons-vfs/1.0/commons-vfs-1.0.jar"
            dest="${ivy.jar.dir}/commons-vfs-1.0.jar" usetimestamp="true"/>
        
        <get 
            src="http://repo1.maven.org/maven2/commons-logging/commons-logging/1.1/commons-logging-1.1.jar"
            dest="${ivy.jar.dir}/commons-logging-1.1.jar" usetimestamp="true"/>-->
    </target>
    
    <target name="install-ivy" depends="download-ivy">
        <!-- try to load ivy here from local ivy dir, in case the user has not already dropped
            it into ant's lib dir (note that the latter copy will always take precedence).
            We will not fail as long as local lib dir exists (it may be empty) and
            ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:configure file="ivysettings.xml"/>
    </target>    
    
    <target name="install-svnant" depends="install-ivy">
        <ivy:cachepath pathid="svnant.classpath" conf="svntask"/>
        <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant.classpath" />
    </target>
    
    <target name="install-izpack" depends="install-ivy">
        <ivy:cachepath pathid="izpack.classpath" conf="izpack"/>
        <!-- Allows us to use the IzPack Ant task to create the graphical installer -->
        <taskdef name="IzPack" classpathref="izpack.classpath" classname="com.izforge.izpack.ant.IzPackTask"/>
    </target>
    
    <target name="resolve" depends="install-ivy">
        <ivy:resolve showprogress="false"/>
    </target>
    
    <target name="retrieve" depends="install-ivy">
        <mkdir dir="${lib.dir}"/>
        <ivy:retrieve pattern="${lib.dir}/[artifact].[ext]" sync="true" symlink="true" type="jar"/>
    </target>
    
    <target name="init">
        <mkdir dir="${build.src.dir}"/>
        <mkdir dir="${build.test.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${test.dir}"/>
    </target>
    
    <target name="clean" description="-> removes auto-generated files/folders">
        <delete dir="${build.dir}"/>
        <delete dir="${lib.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${test.dir}"/>
        <delete dir="${doc.dir}"/>
    </target>
    
    <target name="clean-ivy" description="-> removes the ivy installation">
        <delete dir="${ivy.jar.dir}"/>
    </target>
    
    <target name="clean-cache" depends="install-ivy" description="-> cleans the ivy cache">
        <ivy:cleancache />
    </target>
    
    <target name="clean-meandre" description="-> removes auto-generated Meandre runtime artifacts">
        <delete includeemptydirs="true">
            <fileset dir="${basedir}">
                <include name="MeandreStore/**"/>
                <include name="published_resources/**"/>
                <include name="run/**"/>
                <include name="mnt/**"/>
                <include name="log/**"/>
                <include name="meandre-config-*.xml"/>
                <include name="meandre-realm.properties"/>
            </fileset>
            <fileset dir="${data.dir}" includes="test/zigzag/**/*.mau"/>
        </delete>
    </target>
    
    <target name="clean-all" depends="clean, clean-cache, clean-ivy" description="-> cleans everything"/>
    
    <target name="get-version" depends="install-svnant">
        <svn failonerror="false">
            <wcVersion path="${basedir}" prefix="svn.root."/>
        </svn>
        
        <condition property="svn_revision" value="${svn.root.revision.max-with-flags}" else="custom">
            <isset property="svn.root.revision.max-with-flags"/>
        </condition>
        
        <tstamp>
            <format property="TIMESTAMP" pattern="MMM d, yyyy h:mm:ssa Z"/>
        </tstamp>
        
        <property name="version.full" value="${version}.${svn_revision}"/>
        <property name="infrastructure.jar.file" value="meandre-server-${version.full}.jar"/>
    </target>
    
    <target name="check.version.upToDate">
        <tempfile property="version.tmp" prefix="Version.java" suffix=".tmp" createfile="true" deleteonexit="true"/>
        <copy file="${version.template}" toFile="${version.tmp}" overwrite="true">
            <filterset>
                <filter token="VERSION" value="${version}"/>
                <filter token="REVISION" value="${svn_revision}"/>
                <filter token="RELEASE_TAG" value="${release_tag}"/>
            </filterset>
        </copy>
        
        <condition property="version.upToDate">
            <filesmatch file1="${version.tmp}" file2="${version.file}"/>
        </condition>
    </target>
    
    <target name="update-version" depends="get-version, check.version.upToDate" unless="version.upToDate">
        <echo message="${ant.project.name} version ${version.full}"></echo>
        <copy file="${version.tmp}" tofile="${version.file}" overwrite="true"/>
    </target>
    
    <target name="prepare" depends="resolve">
        <ivy:cachepath pathid="meandre.core.classpath" conf="meandre-core"/>
        <ivy:cachepath pathid="meandre.server.classpath" conf="meandre-server"/>
        <ivy:cachepath pathid="test.classpath" conf="test"/>
        <ivy:cachefileset setid="meandre.server.libs" type="jar" conf="meandre-server"/>
    </target>
    
    <target name="compile" depends="init, prepare, update-version" description="-> compiles the source tree">
        <javac destdir="${build.src.dir}" classpathref="meandre.core.classpath" updatedproperty="src.code.updated">
            <src refid="src.code.dirs"/>
        </javac>
        
        <!-- include other files that should be available to runtime classpath-->
        <copy todir="${build.src.dir}" includeEmptyDirs="no">
            <fileset dir="${basedir}">
                <include name="src-*/code/**/*.*"/>
                <exclude name="src-*/code/**/*.java"/>
            </fileset>
            <regexpmapper from="^src-.+/code/(.+)$" to="\1"/>
        </copy>
    </target>
    
    <target name="compile-tests" depends="compile" description="-> compiles the unit tests">
        <javac destdir="${build.test.dir}" updatedproperty="src.test.updated">
            <src refid="src.test.dirs"/>
            <classpath>
                <path refid="meandre.server.classpath"/>
                <path refid="test.classpath"/>
                <pathelement location="${build.src.dir}"/>
            </classpath>
        </javac>
        
        <!-- include other files that should be available to runtime classpath-->
        <copy todir="${build.test.dir}" includeEmptyDirs="no">
            <fileset dir="${basedir}">
                <include name="src-*/test/**/*.*"/>
                <exclude name="src-*/test/**/*.java"/>
            </fileset>
            <regexpmapper from="^src-.+/test/(.+)$" to="\1"/>
        </copy>
    </target>
    
    <target name="check.tests.upToDate">
        <condition property="tests.upToDate">
            <and>
                <not>
                    <or>
                        <isset property="src.code.updated"/>
                        <isset property="src.test.updated"/>
                    </or>
                </not>
                
                <uptodate>
                    <srcfiles dir="${build.test.dir}" includes="**/*Test.class"/>
                    <mapper type="package" from="*Test.class" to="${test.dir}/xml/TEST-*Test.xml"/>
                </uptodate>
            </and>
        </condition>
    </target>
    
    <!-- run-tests -->
    <target name="run-tests" depends="compile-tests, check.tests.upToDate" unless="tests.upToDate" description="-> runs the unit tests">
        <mkdir dir="${test.dir}/xml"/>
        <junit printsummary="yes" forkmode="once" errorProperty="test.error"
            failureProperty="test.failed" fork="yes" showoutput="yes">
            <jvmarg value="-Duser.language=en"/>
            
            <classpath>
                <path refid="meandre.server.classpath"/>
                <path refid="test.classpath"/>
                <pathelement location="${build.src.dir}"/>
                <pathelement location="${build.test.dir}"/>
            </classpath>
 
            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>

            <batchtest todir="${test.dir}/xml">
                <fileset dir="${build.test.dir}"  includes="**/*Test.class"/>
            </batchtest>
        </junit>
        
        <!-- remove Meandre test runtime artifacts -->
        <antcall target="clean-meandre"/>
    </target>
    
    <!-- test-reports -->
    <target name="test-reports" depends="run-tests" description="-> generates test reports">
        <mkdir dir="${test.dir}/reports"/>
        
        <junitreport todir="${test.dir}/xml">
            <fileset dir="${test.dir}/xml" includes="TEST-*.xml"/>
            <report format="noframes" todir="${test.dir}/reports"/>
        </junitreport>
        
        <echo message="Report generated at: file://${test.dir}/reports/junit-noframes.html"/>
    </target>
    
    <target name="dist-libs" depends="compile" description="-> creates lib distribution">
        <manifest file="MANIFEST.MF">
            <attribute name="Build-Version" value="${version.full}"/>
            <attribute name="Build-Date" value="${TIMESTAMP}"/>
            <attribute name="Built-By" value="${user.name}"/>
        </manifest>
        
        <!-- Create core jar -->
        <jar 
            destfile="${dist.dir}/meandre-core-${version.full}.jar" 
            basedir="${build.src.dir}" 
            manifest="MANIFEST.MF"/>
        
        <!-- Create kernel jar -->
        <jar destfile="${dist.dir}/meandre-kernel-${version.full}.jar" manifest="MANIFEST.MF">
            <fileset dir="${build.src.dir}">
                <include name="org/meandre/configuration/**"/>
                <include name="org/meandre/core/**"/>
                <include name="org/meandre/webui/**"/>
                <exclude name="org/meandre/core/store/**"/>
            </fileset>
        </jar>
        
        <!-- Create plugins jar -->
        <jar 
            destfile="${dist.dir}/meandre-plugins-${version.full}.jar" 
            basedir="${build.src.dir}" 
            includes="org/meandre/plugins/**"
            manifest="MANIFEST.MF"/>

        <!-- Create demo jar -->
        <jar 
            destfile="${dist.dir}/meandre-demo-${version.full}.jar"
            basedir="${build.src.dir}"
            includes="org/meandre/demo/**"
            manifest="MANIFEST.MF"/>
        
        <!-- Create ZigZag jar -->
        <jar 
            destfile="${dist.dir}/meandre-zigzag-${version.full}.jar"
            basedir="${build.src.dir}"
            includes="org/meandre/zigzag/**"
            manifest="MANIFEST.MF"/>
        
        <!-- Create MAU jar -->
        <jar 
            destfile="${dist.dir}/meandre-mau-${version.full}.jar"
            basedir="${build.src.dir}"
            includes="org/meandre/mau/**"
            manifest="MANIFEST.MF"/>
        
        <!-- Create webservices jar -->
        <jar destfile="${dist.dir}/meandre-webservices-${version.full}.jar" manifest="MANIFEST.MF">
            <fileset dir="${build.src.dir}">
                <include name="org/meandre/webservices/**"/>
                <include name="**/webui/**/*.py"/>
            </fileset>
        </jar>
        
        <!-- Create store jar -->
        <jar 
            destfile="${dist.dir}/meandre-store-${version.full}.jar"
            basedir="${build.src.dir}"
            includes="org/meandre/core/store/**"
            manifest="MANIFEST.MF"/>
        
        <!-- Create client jar -->
        <jar 
            destfile="${dist.dir}/meandre-client-${version.full}.jar"
            basedir="${build.src.dir}"
            includes="org/meandre/client/**"
            manifest="MANIFEST.MF"/>
        
        <!-- Create annotation jar -->
        <jar 
            destfile="${dist.dir}/meandre-annotation-${version.full}.jar"
            basedir="${build.src.dir}"
            includes="org/meandre/annotations/**"
            manifest="MANIFEST.MF"/>
        
        <!-- Create coordinator jar -->
        <jar 
            destfile="${dist.dir}/meandre-coordinator-${version.full}.jar"
            basedir="${build.src.dir}"
            includes="org/meandre/core/services/coordinator/**"
            manifest="MANIFEST.MF"/>
        
        <delete file="MANIFEST.MF" quiet="true"/>
    </target>
    
    <target name="dist-standalone" depends="compile" description="-> creates standalone distribution jars">
        <tempfile property="release.tmp.dir" destdir="${dist.dir}" prefix="release" suffix=".tmp"/>
        <mkdir dir="${release.tmp.dir}"/>
        <copy todir="${release.tmp.dir}" includeEmptyDirs="no">
            <fileset dir="${build.src.dir}"/>
        </copy>
        <unjar dest="${release.tmp.dir}">
            <fileset refid="meandre.server.libs"/>
        </unjar>
        <delete file="${release.tmp.dir}/META-INF/MANIFEST.MF" quiet="true"/>
        <delete file="${release.tmp.dir}/LICENSE" quiet="true"/>
        
        <!-- Creating the Meandre server jar distribution -->
        <jar destfile="${dist.dir}/${infrastructure.jar.file}" basedir="${release.tmp.dir}">
            <manifest>
                <attribute name="Build-Version" value="${version.full}"/>
                <attribute name="Build-Date" value="${TIMESTAMP}"/>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="org.meandre.webservices.WSInfrastructureBootstrapper"/>
            </manifest>
        </jar>
        
        <!-- Creating the Meandre ZigZag compiler jar distribution -->
        <jar destfile="${dist.dir}/zzc-${version.full}.jar" basedir="${release.tmp.dir}">
            <manifest>
                <attribute name="Build-Version" value="${version.full}"/>
                <attribute name="Build-Date" value="${TIMESTAMP}"/>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="org.meandre.zigzag.parser.ZigZag"/>
            </manifest>
        </jar>
        
        <!-- Creating the Meandre mau executor jar distribution -->
        <jar destfile="${dist.dir}/zzre-${version.full}.jar" basedir="${release.tmp.dir}">
            <manifest>
                <attribute name="Build-Version" value="${version.full}"/>
                <attribute name="Build-Date" value="${TIMESTAMP}"/>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="org.meandre.mau.MAUExecutor"/>
            </manifest>
        </jar>
        
        <!-- Creating the Meandre interpreter console jar distribution -->
        <jar destfile="${dist.dir}/zz-${version.full}.jar" basedir="${release.tmp.dir}">
            <manifest>
                <attribute name="Build-Version" value="${version.full}"/>
                <attribute name="Build-Date" value="${TIMESTAMP}"/>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Main-Class" value="org.meandre.zigzag.console.ZigZagConsole"/>
            </manifest>
        </jar>
        
        <delete dir="${release.tmp.dir}"/>
    </target>
    
    <target name="dist-installer" depends="dist-standalone, install-izpack" description="-> creates Infrastructure graphical installer">
        <IzPack 
            input="${installer.dir}/config/install.xml"
            output="${dist.dir}/meandre-server-${version.full}-install.jar"
            installerType="standard"
            basedir="${installer.dir}"
            inheritAll="true"/>
    </target>
    
    <target name="dist" depends="dist-libs, dist-standalone, dist-installer" description="-> creates distribution suite"/>
    
    <target name="publish" depends="run-tests, dist" description="-> publishes the build artifacts to the ivy repository">
        <fail message="Error: ivy.repo.host and ivy.repo.path need to be set before attempting to publish.">
            <condition>
                <or>
                    <not>
                        <isset property="ivy.repo.host"/>
                    </not>
                    
                    <not>
                        <isset property="ivy.repo.host"/>
                    </not>
                </or>
            </condition>
        </fail>
        
        <ivy:publish 
            resolver="seasr-upload" 
            pubrevision="${version}" 
            overwrite="true"
            artifactspattern="${dist.dir}/[artifact]-[revision].${svn_revision}.[ext]"/>
    </target>
    
    <!--<target name="create-ivy-rep" depends="install-ivy">
        <ivy:install organisation="org.codehaus.izpack" module="izpack-standalone-compiler" revision="4.2.1" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="commons-fileupload" module="commons-fileupload" revision="1.2.1" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="commons-httpclient" module="commons-httpclient" revision="3.1" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="commons-io" module="commons-io" revision="1.4" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="org.apache.derby" module="derby" revision="10.4.1.3" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="com.hp.hpl.jena" module="arq" revision="2.5.0" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="com.hp.hpl.jena" module="json-jena" revision="1.0" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="org.codehaus.jettison" module="jettison" revision="1.0.1" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="jline" module="jline" revision="0.9.94" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="junit" module="junit" revision="4.5" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="org.python" module="jython" revision="2.2.1" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="org.mortbay.jetty" module="jetty" revision="6.1.5" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="org.mortbay.jetty" module="jetty-util" revision="6.1.5" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="de.schlichtherle.io" module="truezip" revision="6.6" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
        <ivy:install organisation="com.thoughtworks.xstream" module="xstream" revision="1.3" from="ibiblio" to="dependencies-upload" transitive="true" overwrite="true"/>
    </target>-->
    
    <!--- Documentation (Javadocs) -->
    <target name="javadoc" depends="prepare" description="-> generates the documentation">
        <mkdir dir="${doc.dir}"/>
        <javadoc
            sourcepathref="src.code.dirs"
            maxmemory="512m"
            access="private"
            windowtitle="Meandre Core API"
            author="true"
            use="true"
            destdir="${doc.dir}/">
            <classpath>
                <path refid="meandre.core.classpath"/>
                <pathelement location="${build.src.dir}"/>
            </classpath>
        </javadoc>
    </target>
</project>
