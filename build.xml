<?xml version="1.0" encoding="UTF-8"?>
<project name="Meandre-Core" basedir="." default="compile">
    <!-- Check whether Java 1.5 is being used -->
    <condition property="using.java.1.5">
        <or>
            <contains string="${java.version}" substring="1.5"/>
        </or>
    </condition>

    <!-- Check whether Ant 1.7 is being used -->
    <condition property="using.ant.1.7">
        <contains string="${ant.version}" substring="1.7"/>
    </condition>

    <!-- Make sure we're running under the correct environment -->
    <fail message="This package requires Ant 1.7." unless="using.ant.1.7"/>
    <fail message="This package requires Java 5. Please set JAVA_HOME to point to where JDK 1.5 is installed."
          unless="using.java.1.5"/>

    <!-- import properties (app settings, classpath, jar file locations) -->
    <import file="properties.xml"/>

    <target name="init" description="-> creates required folders">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <!-- compile -->
    <target name="compile" depends="init" description="-> compiles source code">
        <javac srcdir="${basedir}" destdir="${build.dir}/" debug="${compile.debug}"
               deprecation="${compile.deprecation}" optimize="${compile.optimize}"
               classpathref="meandre.core.classpath">
            <include name="${kernel.src}/**/*.java"/>
            <include name="${plugins.src}/**/*.java"/>
            <include name="${demo.src}/**/*.java"/>
            <include name="${ws.src}/**/*.java"/>
        </javac>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${demo.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${kernel.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${plugins.src}/vfs">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${demo.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${ws.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>
    </target>

    <!-- compile-tests -->
    <target name="compile-tests" depends="compile" description="-> compiles test code">
        <javac srcdir="${test.src}/demo" destdir="${build.dir}" classpathref="meandre.test.classpath"/>
        <javac srcdir="${test.src}/kernel" destdir="${build.dir}" classpathref="meandre.test.classpath"/>
        <javac srcdir="${test.src}/ws" destdir="${build.dir}" classpathref="meandre.test.classpath"/>
    </target>

    <!-- check-if-svn -->
    <target name="check-if-svn">
        <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="meandre.core.classpath"/>
        <svn javahl="false">
            <status path="." textStatusProperty="testStatus.textStatus"
                    propStatusProperty="testStatus.propStatus"
                    lastChangedRevisionProperty="testStatus.lastCommitRevision"
                    revisionProperty="testStatus.revision"
                    lastCommitAuthorProperty="testStatus.lastCommitAuthor"/>
        </svn>
        <echo>${testStatus.revision}</echo>

        <condition property="isValidRevision">
            <and>
                <equals arg1="${testStatus.textStatus}" arg2="normal"/>
                <isset property="testStatus.revision"/>
            </and>
        </condition>
        <echo>${isValidRevision}</echo>
    </target>

    <!-- The distribution is created with a revision -->
    <target name="create-distribution" depends="check-if-svn" if="isValidRevision">
        <jar destfile="${dist.dir}/${app.name}-${testStatus.revision}.jar">
            <manifest>
                <attribute name="Build-Version" value="${testStatus.revision}"/>
                <attribute name="Last-Commit-Author" value="${testStatus.lastCommitAuthor}"/>
                <attribute name="Status" value="${testStatus.textStatus}"/>
            </manifest>
            <fileset dir="${build.dir}">
            </fileset>
        </jar>
    </target>

    <!-- The distribution is created with a revision it is tied to the trunk -->
    <target name="lib-release" depends="create-distribution" if="isValidRevision"
            description="-> creates the distribution for maven/ivy">
        <mkdir dir="${release.location}/trunk-${testStatus.revision}"/>
        <copy file="${dist.dir}/${app.name}-${testStatus.revision}.jar"
              todir="${release.location}/trunk-${testStatus.revision}"/>
    </target>

    <target name="app-release" depends="create-distribution" if="isValidRevision"
            description="-> creates the distribution to run as an application">
        <mkdir dir="${release.location.app}/trunk-${testStatus.revision}"/>
        <copy file="${dist.dir}/${app.name}-${testStatus.revision}.jar"
              todir="${release.location}/trunk-${testStatus.revision}"/>

        <delete>
            <fileset dir="." includes="dist/*.tar.gz"/>
            <fileset dir="." includes="dist/*.tar"/>
        </delete>

        <tar destfile="${dist.dir}/${app.name}-${testStatus.revision}.tar"
             basedir="."
             excludes="**/.svn,log/**,bin/**,MeandreStore/**,test/**,*.log"/>

        <gzip zipfile="${dist.dir}/${app.name}-${testStatus.revision}.tar.gz"
              src="${dist.dir}/${app.name}-${testStatus.revision}.tar"/>

        <copy file="${dist.dir}/${app.name}-${testStatus.revision}.tar.gz"
              todir="${release.location.app}/trunk-${testStatus.revision}"/>
    </target>

    <!-- dist -->
    <target name="dist" depends="compile" description="-> creates jar distribution">

        <!-- Create jar distribution -->
        <jar destfile="${dist.dir}/${app.name}-core.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/core/**/*.class"/>
                <include name="**/core/**/*.properties"/>
                <include name="**/core/**/*.xml"/>
            </fileset>
        </jar>

        <jar destfile="${dist.dir}/${app.name}-ws.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/webservices/**/*.class"/>
                <include name="**/webservices/**/*.properties"/>
                <include name="**/webservices/**/*.xml"/>
            </fileset>
        </jar>

        <jar destfile="${dist.dir}/${app.name}-webui.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/webui/**/*.class"/>
                <include name="**/webui/**/*.properties"/>
                <include name="**/webui/**/*.xml"/>
            </fileset>
        </jar>

        <jar destfile="${dist.dir}/${app.name}-componentdemo.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/demo/**/*.class"/>
                <include name="**/demo/**/*.properties"/>
                <include name="**/demo/**/*.xml"/>
            </fileset>
        </jar>

        <jar destfile="${dist.dir}/${app.name}-main.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <exclude name="**/demo/**/*.class"/>
                <exclude name="**/demo/**/*.properties"/>
                <exclude name="**/demo/**/*.xml"/>
                <exclude name="**/webui/**/*.class"/>
                <exclude name="**/webui/**/*.properties"/>
                <exclude name="**/webui/**/*.xml"/>
                <exclude name="**/webservices/**/*.class"/>
                <exclude name="**/webservices/**/*.properties"/>
                <exclude name="**/webservices/**/*.xml"/>
                <exclude name="**/core/**/*.class"/>
                <exclude name="**/core/**/*.properties"/>
                <exclude name="**/core/**/*.xml"/>
            </fileset>
        </jar>
    </target>

    <!-- clean -->
    <target name="clean" description="-> removes build artifacts">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>

    <target name="clean-test-data" description="-> removes test artifacts">
        <delete includeemptydirs="true">
            <fileset dir="${test.dir}">
            	<include name="**/*"/>
            	<exclude name="meandre/meandre-config.xml"/>
            	<exclude name="meandre/webservices.properties"/>
            </fileset>
        </delete>
    </target>

    <!-- run-tests -->
    <target name="run-tests" depends="compile-tests, clean-test-data" description="-> runs tests">
    	<mkdir dir="${test.dir}/xml"/>
        <junit printsummary="yes" forkmode="once" errorProperty="test.error"
               failureProperty="test.failed" fork="${junit.fork}" showoutput="${junit.showoutput}">
            <jvmarg value="-Duser.language=en"/>

            <classpath>
                <path refid="meandre.test.classpath"/>
                <pathelement location="${build.dir}"/>
                <pathelement path="${java.class.path}"/>
            </classpath>

            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>

            <batchtest todir="${test.dir}/xml">
                <fileset dir="${test.src}/demo">
                    <include name="**/*Test.java"/>
                </fileset>

                <fileset dir="${test.src}/kernel">
                    <include name="**/*Test.java"/>
                </fileset>

                <fileset dir="${test.src}/ws">
                    <include name="**/*Test.java"/>
                    <exclude name="org/meandre/webservices/BaseServletTest.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- test-reports -->
    <target name="test-reports" depends="run-tests" description="-> generates test reports">
        <mkdir dir="${test.dir}/reports"/>
        <junitreport todir="${test.dir}/xml">
            <fileset dir="${test.dir}/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${test.dir}/reports"/>
        </junitreport>
        <echo message="Report generated at: file://${test.dir}/reports/junit-noframes.html"/>
    </target>

    <!-- run-core -->
    <target name="run" depends="dist" description="-> runs the default Meandre-Core server">
        <java classname="org.meandre.webservices.WSCoreBootstrapper" fork="yes" maxmemory="1024m">
            <classpath refid="meandre.core.classpath"/>
            <classpath>
                <pathelement location="${dist.dir}/${app.name}-core.jar"/>
                <pathelement location="${dist.dir}/${app.name}-ws.jar"/>
                <pathelement location="${dist.dir}/${app.name}-webui.jar"/>
                <pathelement location="${dist.dir}/${app.name}-componentdemo.jar"/>
                <pathelement location="${dist.dir}/${app.name}-main.jar"/>
            </classpath>
            <jvmarg value="-showversion"/>
        </java>
    </target>

    <!-- run-silent -->
    <target name="run-silent" depends="dist"
            description="-> runs the Meandre-Core server with 2GB of memory as a separate process">
        <java classname="org.meandre.webservices.WSCoreBootstrapper" fork="yes" spawn="yes" maxmemory="2048m">
            <classpath refid="meandre.core.classpath"/>
            <classpath>
                <pathelement location="${dist.dir}/${app.name}-core.jar"/>
                <pathelement location="${dist.dir}/${app.name}-ws.jar"/>
                <pathelement location="${dist.dir}/${app.name}-webui.jar"/>
                <pathelement location="${dist.dir}/${app.name}-componentdemo.jar"/>
                <pathelement location="${dist.dir}/${app.name}-main.jar"/>
            </classpath>
            <jvmarg value="-showversion"/>
        </java>
    </target>

    <!-- clean-store -->
    <target name="clean-store"
            description="-> deletes the MeandreStore directory, which contains the database of all installed ('uploaded') components and flows">

        <delete dir="MeandreStore"/>
    </target>

	<target name="clean-all" depends="clean, clean-test-data, clean-store"
		description="-> removes all auto-generated files and folders, including MeandreStore/ published_resources/ and mnt/">
		<delete dir="published_resources"/>
		<delete dir="log"/>
		<delete dir="mnt"/>
		<delete dir="run"/>
		<delete file="derby.log"/>
		<delete file="meandre-config.xml"/>
		<delete file="meandre-plugins.xml"/>
	</target>

    <!--- Documentation (Javadocs) -->
    <target name="javadoc"
            description="-> generates the documentation (ignore all warnings)">

        <javadoc
                sourcepath="${src}/"
                maxmemory="512m"
                access="private"
                windowtitle="Meandre Core API"
                author="true"
                use="true"
                destdir="${doc.dir}/"/>
    </target>
</project>

<!-- DO NOT EDIT BELOW THIS LINE PLEASE -->
<!-- vim:sw=4:softtabstop=4:expandtab
-->
