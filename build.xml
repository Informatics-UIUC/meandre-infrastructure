<?xml version="1.0" encoding="UTF-8"?>
<project name="Meandre-Core" basedir="." default="dist">
    <!-- Check whether Java 1.5 is being used -->
    <condition property="using.java.1.5">
        <or>
            <contains string="${java.version}" substring="1.5"/>
        </or>
    </condition>
	
	<!-- Check whether Ant 1.7 is being used -->
    <condition property="using.ant.1.7">
        <contains string="${ant.version}" substring="1.7"/>
    </condition>

    <!-- Make sure we're running under the correct environment -->
    <fail message="This package requires Ant 1.7." unless="using.ant.1.7"/>
    <fail message="This package requires Java 5. Please set JAVA_HOME to point to where JDK 1.5 is installed."
          unless="using.java.1.5"/>

    <!-- import properties (app settings, classpath, jar file locations) -->
    <import file="properties.xml"/>

    <target name="init" description="-> creates required folders">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${test.dir}"/>
        <mkdir dir="${doc.dir}"/>
    </target>

   <!-- compile -->
    <target name="compile" depends="init" description="-> compiles source code">
        <javac srcdir="${basedir}" destdir="${build.dir}/" debug="${compile.debug}"
               deprecation="${compile.deprecation}" optimize="${compile.optimize}"
               classpathref="meandre.core.classpath">
            <include name="${kernel.src}/**/*.java"/>
            <include name="${zigzag.src}/**/*.java"/>
            <include name="${plugins.src}/**/*.java"/>
            <include name="${demo.src}/**/*.java"/>
            <include name="${ws.src}/**/*.java"/>
            <include name="${store.src}/**/*.java"/>
            <include name="${terracotta.src}/**/*.java"/>
            <include name="${client.src}/**/*.java"/>
        	<include name="${annotation.src}/**/*.java"/>
        </javac>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${demo.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${kernel.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${zigzag.dir}" includeEmptyDirs="no">
            <fileset dir="${zigzag.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${plugins.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${demo.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${ws.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>

        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${store.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>
    	
        <copy todir="${build.dir}" includeEmptyDirs="no">
            <fileset dir="${terracotta.src}">
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
                <include name="**/*.vm"/>
                <include name="**/*.list"/>
            </fileset>
        </copy>
    </target>

    <!-- compile-tests -->
    <target name="compile-tests" depends="compile" description="-> compiles test code">
    	<javac srcdir="${kernel.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
    	<javac srcdir="${zigzag.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
    	<javac srcdir="${demo.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
    	<javac srcdir="${plugins.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
		<javac srcdir="${ws.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
    	<javac srcdir="${store.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
    	<javac srcdir="${terracotta.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
    	<javac srcdir="${client.test}" destdir="${test.dir}" classpathref="meandre.test.classpath"/>
    </target>

	<!-- clean -->
	<target name="clean" description="-> removes build artifacts">
	    <delete dir="${build.dir}"/>
        <delete includeemptydirs="true">
            <fileset dir="${test.dir}" casesensitive="yes">
                <include name="**/*"/>
                <exclude name="data/"/>
            </fileset>
        </delete>
	    <delete dir="${doc.dir}"/>
	    <delete dir="${dist.dir}/tmp"/>
	</target>
    	
	<!-- clean meandre installation-->
	<target name="clean-meandre" description="-> removes meandre created files">
	    <delete dir="MeandreStore"/>
	    <delete dir="published_resources"/>
	    <delete dir="run"/>
        <delete dir="log"/>
        <delete dir="DerbyLog"/>
		<delete dir="mnt"/>
        <delete file="derby.log"/>
		<delete file="meandre-config-plugins.xml"/>
        <delete file="meandre-config-store.xml"/>
        <delete file="meandre-config-core.xml"/>
        <delete file="meandre-realm.properties"/>
	</target>	
		

    <!-- run-tests -->
    <target name="run-tests" depends="compile-tests" description="-> runs tests">
    	<mkdir dir="${test.dir}/xml"/>
        <junit printsummary="yes" forkmode="once" errorProperty="test.error"
               failureProperty="test.failed" fork="${junit.fork}" showoutput="${junit.showoutput}">
            <jvmarg value="-Duser.language=en"/>

            <classpath>
                <path refid="meandre.test.classpath"/>
            	<pathelement location="${build.dir}"/>
            	<pathelement location="${test.dir}"/>
            	<pathelement path="${java.class.path}"/>
            </classpath>

            <formatter type="xml"/>
            <formatter type="brief" usefile="false"/>

            <batchtest todir="${test.dir}/xml">
                <fileset dir="${kernel.test}">
                    <include name="**/*Test.java"/>
                </fileset>

            	<fileset dir="${plugins.test}">
                    <include name="**/*Test.java"/>
                </fileset>

            	<fileset dir="${demo.test}">
                    <include name="**/*Test.java"/>
                </fileset>

            	<fileset dir="${zigzag.test}">
                    <include name="**/*Test.java"/>
                </fileset>

            	<fileset dir="${ws.test}">
                    <include name="**/*Test.java"/>
                </fileset>

            	<fileset dir="${store.test}">
                    <include name="**/*Test.java"/>
                </fileset>
            	
            	<fileset dir="${terracotta.test}">
                    <include name="**/*Test.java"/>
                </fileset>
                
                <fileset dir="${client.test}">
                    <include name="**/*Test.java"/>
                </fileset>
            
            	
            </batchtest>
        </junit>
    </target>

  <!-- test-reports -->
    <target name="test-reports" depends="run-tests" description="-> generates test reports">
        <mkdir dir="${test.dir}/reports"/>
        <junitreport todir="${test.dir}/xml">
            <fileset dir="${test.dir}/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="${test.dir}/reports"/>
        </junitreport>
        <echo message="Report generated at: file://${test.dir}/reports/junit-noframes.html"/>
    </target>

	<!--- Documentation (Javadocs) -->
	<target name="javadoc" depends="init"
	        description="-> generates the documentation (ignore all warnings)">
	
	    <javadoc
	    	    classpathref="meandre.test.classpath"
	            maxmemory="512m"
	            access="private"
	            windowtitle="Meandre Core API"
	            author="true"
	            use="true"
	            destdir="${doc.dir}/">
	    	
	    	<fileset dir="." defaultexcludes="yes">
	    	      <include name="${kernel.src}/**"/>
	    	      <include name="${plugins.src}/**"/>
	    	      <include name="${demo.src}/**"/>
	    	      <include name="${zigzag.src}/**"/>
	    	      <include name="${ws.src}/**"/>
	    	      <include name="${store.src}/**"/>
	    	      <include name="${terracotta.src}/**"/>
                  <include name="${client.src}/**"/>
	    		  <include name="${annotation.src}/**"/>
	    		  <exclude name="**/*.properties" />
	    		  <exclude name="**/*.jj" />
	    	</fileset>
	    	
	    </javadoc>
	</target>

	<!-- dist -->
    <target name="dist" depends="compile,test-reports" description="-> creates jars for distribution">

    	<mkdir dir="${dist.dir}/lib"/>
    	<mkdir dir="${dist.dir}/tmp"/>
    	    	
        <!-- Create core jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-core-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/*.class"/>
                <include name="**/*.properties"/>
                <include name="**/*.xml"/>
            </fileset>
        </jar>

        <!-- Create kernel jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-kernel-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/configuration/**/*.class"/>
                <include name="**/configuration/**/*.properties"/>
                <include name="**/configuration/**/*.xml"/>
                <include name="**/core/**/*.class"/>
                <include name="**/core/**/*.properties"/>
                <include name="**/core/**/*.xml"/>
                <include name="**/webui/**/*.class"/>
                <include name="**/webui/**/*.properties"/>
                <include name="**/webui/**/*.xml"/>

                <exclude name="**/store/**/*.class"/>
                <exclude name="**/store/**/*.properties"/>
                <exclude name="**/store/**/*.xml"/>
            </fileset>
        </jar>

        <!-- Create plugins jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-plugins-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/plugins/**/*.class"/>
                <include name="**/plugins/**/*.properties"/>
                <include name="**/plugins/**/*.xml"/>
            </fileset>
        </jar>

        <!-- Create demo jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-demo-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/demo/**/*.class"/>
                <include name="**/demo/**/*.properties"/>
                <include name="**/demo/**/*.xml"/>
            </fileset>
        </jar>

        <!-- Create zigzag jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-zigzag-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/zigzag/**/*.class"/>
                <include name="**/zigzag/**/*.properties"/>
                <include name="**/zigzag/**/*.xml"/>
            </fileset>
        </jar>

        <!-- Create mau jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-mau-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/mau/**/*.class"/>
                <include name="**/mau/**/*.properties"/>
                <include name="**/mau/**/*.xml"/>
            </fileset>
        </jar>

        <!-- Create webservices jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-webservices-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/webservices/**/*.class"/>
                <include name="**/webservices/**/*.properties"/>
                <include name="**/webservices/**/*.xml"/>
            </fileset>
        </jar>

        <!-- Create store jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-store-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/store/**/*.class"/>
                <include name="**/store/**/*.properties"/>
                <include name="**/store/**/*.xml"/>
            </fileset>
        </jar> 	

        <!-- Create terracotta jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-terracotta-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/terracotta/**/*.class"/>
                <include name="**/terracotta/**/*.properties"/>
                <include name="**/terracotta/**/*.xml"/>
            </fileset>
        </jar>
    	
        <!-- Create client jar -->
        <jar destfile="${dist.dir}/lib/${app.name}-client-${build.version}.jar">
            <manifest>
                <attribute name="Build-Version" value="${build.version}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <include name="**/client/**/*.class"/>
                <include name="**/client/**/*.properties"/>
                <include name="**/client/**/*.xml"/>
            </fileset>
        </jar>  
    	
    	
    	<!-- Create annotation jar -->
    	<jar destfile="${dist.dir}/lib/${app.name}-annotation-${build.version}.jar">
    		<manifest>
    	        <attribute name="Build-Version" value="${build.version}"/>
    	    </manifest>
    	    <fileset dir="${build.dir}">
    	        <include name="**/annotations/**/*.class"/>
    	        <include name="**/annotations/**/*.properties"/>
    	        <include name="**/annotations/**/*.xml"/>
    	    </fileset>
    	</jar>  
    	
    	<!-- Preparations to create the release jars -->
        <copy todir="${dist.dir}/tmp" includeEmptyDirs="no">
             <fileset dir="${build.dir}">
                 <include name="**"/>
             </fileset>
        </copy>
    	<unjar dest="${dist.dir}/tmp" overwrite="true">
    		 <fileset dir="${lib.dep.dir}">
    		        <include name="**/*.jar"/>
    		 </fileset>
    	</unjar>
    	<delete file="${dist.dir}/tmp/META-INF/MANIFEST.MF" />

    	<!-- Creating the Meandre server jar distribution -->
    	<jar destfile="${dist.dir}/${app.name}-server-${build.version}.jar" >
    		<manifest>
	            <attribute name="Build-Version" value="${build.version}"/>
	            <attribute name="Main-Class" value="org.meandre.webservices.WSCoreBootstrapper"/>
	        </manifest>
	        <fileset dir="${dist.dir}/tmp/">
	            <include name="**"/>
	        </fileset>
	    </jar>

    	<!-- Creating the Meandre ZigZag compiler jar distribution -->
    	<jar destfile="${dist.dir}/zzc-${build.version}.jar" >
    		<manifest>
	            <attribute name="Build-Version" value="${build.version}"/>
	            <attribute name="Main-Class" value="org.meandre.zigzag.parser.ZigZag"/>
	        </manifest>
	        <fileset dir="${dist.dir}/tmp/">
	            <include name="**"/>
	        </fileset>
	    </jar>

    	<!-- Creating the Meandre mau executor jar distribution -->
    	<jar destfile="${dist.dir}/zzre-${build.version}.jar" >
    		<manifest>
	            <attribute name="Build-Version" value="${build.version}"/>
	            <attribute name="Main-Class" value="org.meandre.mau.MAUExecutor"/>
	        </manifest>
	        <fileset dir="${dist.dir}/tmp/">
	            <include name="**"/>
	        </fileset>
	    </jar>
    	
    	<!-- Creating the Meandre interpreter console jar distribution -->
    	<jar destfile="${dist.dir}/zz-${build.version}.jar" >
    		<manifest>
	            <attribute name="Build-Version" value="${build.version}"/>
	            <attribute name="Main-Class" value="org.meandre.zigzag.console.ZigZagConsole"/>
	        </manifest>
	        <fileset dir="${dist.dir}/tmp/">
	            <include name="**"/>
	        </fileset>
	    </jar>
    	
    	<delete file="${dist.dir}/tmp/" />
    	
	</target>
	
</project>
